################
# Functions
################

# `searchnix` is a shorthand for searching for installable packages in nixpkgs,
# see https://nixos.org/wiki/Howto_find_a_package_in_NixOS#Aliases
searchnix() {
	nix-env -qa \* -P | fgrep -i "$1";
}

################
# Sourcing files
################

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f ~/.nix-profile/etc/profile.d/bash_completion.sh ]; then
    . ~/.nix-profile/etc/profile.d/bash_completion.sh
fi

# include git helpers
if [ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh ]; then
    . /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
fi
if [ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash ]; then
    . /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
fi

# source nix environment, if config exists
if [ -f ~/.nix-profile/etc/profile.d/nix.sh ]; then
    . ~/.nix-profile/etc/profile.d/nix.sh
fi

################
# Aliases
################

# Get macOS Software Updates, and update installed nixpkgs, and their installed packages
alias update='sudo softwareupdate -i -a; which nix-channel > /dev/null && nix-channel --update && nix-env -u --keep-going;'

################
# Exports
################

# Setting git env
export GIT_AUTHOR_NAME='Jan Wagner';
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME":
git config --global user.name "$GIT_AUTHOR_NAME";
export GIT_AUTHOR_EMAIL='waja@cyconet.org';
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL";
git config --global user.email "$GIT_AUTHOR_EMAIL";

# Avoid history duplicates
export HISTCONTROL='ignoredups:erasedups';

################
# Fixing bash prompt, set via .bash_prompt
################

prompt_git() {
	local s='';
	local branchName='';
	local ansi="${green}";

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
				local ansi="${orange}";
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
				local ansi="${yellow}";
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
				local ansi="${blue}";
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${ansi}(${branchName})${1}${s}";
	else
		return;
	fi;
}

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${white}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${white}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\]@";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${reset}\]";
PS1+="\[${white}\]:";
PS1+="\[${bold}\]";
# Yellow seems kinda broken!
#PS1+="\[${yellow}\]\w"; # working directory full path
PS1+="\[\033[01;33m\]\w"; # working directory full path
PS1+=" \$(prompt_git \"\[${blue}\]\")"; # Git repository details
# PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

################
# Load local overwrites
################
if [ -f ~/.extra.local ]; then
    . ~/.extra.local
fi
