################
# Functions
################

# `searchnix` is a shorthand for searching for installable packages in nixpkgs,
# see https://nixos.org/wiki/Howto_find_a_package_in_NixOS#Aliases
searchnix() {
	nix-env -qa \* -P | fgrep -i "$1";
}

################
# Sourcing files
################

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f ~/.nix-profile/etc/profile.d/bash_completion.sh ]; then
    . ~/.nix-profile/etc/profile.d/bash_completion.sh
fi

# include git helpers
if [ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh ]; then
    . /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
fi
if [ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash ]; then
    . /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
fi

# source nix environment, if config exists
if [ -f ~/.nix-profile/etc/profile.d/nix.sh ]; then
    . ~/.nix-profile/etc/profile.d/nix.sh
fi

################
# Aliases
################

# Get macOS Software Updates, and update installed nixpkgs, and their installed packages
# (redefining from .aliases as extending seems not possible)
#alias update='sudo softwareupdate -i -a; which nix-channel > /dev/null && nix-channel --update && nix-env -u --keep-going;'
alias update='sudo softwareupdate -i -a; which brew > /dev/null && brew update && brew upgrade && brew cleanup; which npm > /dev/null && npm install npm -g && npm update -g; which gem > /dev/null && sudo gem update --system && sudo gem update && sudo gem cleanup; which nix-channel > /dev/null && nix-channel --update && nix-env -u --keep-going;'

################
# Exports
################

# Setting git env
export GIT_AUTHOR_NAME='Jan Wagner';
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME":
git config --global user.name "$GIT_AUTHOR_NAME";
export GIT_AUTHOR_EMAIL='waja@cyconet.org';
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL";
git config --global user.email "$GIT_AUTHOR_EMAIL";

# Avoid history duplicates
export HISTCONTROL='ignoredups:erasedups';

################
# Completions
################

# SSH auto-completion based on entries in known_hosts.
if [[ -e ~/.ssh/known_hosts ]]; then
  # complete -o default -W "$(cat ~/.ssh/known_hosts | sed 's/[, ].*//' | sort | uniq | grep -v '[0-9]')" ssh scp sftp
  complete -o default -W \
      "echo $(cat ~/.ssh/config | grep 'Host ' | sort | uniq | cut -d' ' -f2) \
      $(cat ~/.ssh/known_hosts  | cut -d ' ' -f1 | grep ',' | cut -d ',' -f1)" \
      ssh scp sftp
fi
# When completing cd and rmdir, only dirs should be possible option (default is
# all files on Mac).
complete -d cd rmdir

################
# Read our (additional) config files (maybe we need to mess less with upstream)
################
for CONFIG in .extra.prompt_fix; do
	if [ -f ${CONFIG} ]; then
		. ${CONFIG}
	fi
done

################
# Load local overwrites
################
if [ -f ~/.extra.local ]; then
    . ~/.extra.local
fi
